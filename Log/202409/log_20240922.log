[2024-09-22 00:21:36][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 01:41:39][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 02:21:26][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:31:13][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(https://yt102.g8bvhu323.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:01:26][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 16:01:20][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 19:41:21][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 19:51:00][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 20:41:24][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 20:51:42][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:11:09][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:43:19][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:01:48][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:51:31][trigger][warning]:[file_get_contents(https://yt102.g8bvhu323.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:41:30][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
