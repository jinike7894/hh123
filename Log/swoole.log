[2024-09-21 18:03:55][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:55][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:56][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:57][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:57][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:57][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:57][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:59][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:59][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:59][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:59][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:03:59][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:04:10][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:04:10][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:04:11][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 18:04:13][trigger][error]:[initObject fail after 3 times case SQLSTATE[28000] [1045] Access denied for user 'wysp001'@'localhost' (using password: YES) at file:/www/wwwroot/43.199.95.114/vendor/easyswoole/pool/src/AbstractPool.php line:142]
[2024-09-21 10:05:23 #815963.4]	INFO	Server is shutdown now

===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

===================================================================

 [Coroutine-1]
 [Coroutine-1]
--------------------------------------------------------------------

--------------------------------------------------------------------
#0  #0  Swoole\Coroutine\SocketSwoole\Coroutine\Socket->->accept(accept(
 [Coroutine-1]
 [Coroutine-1]) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]

--------------------------------------------------------------------

--------------------------------------------------------------------
#1  #1  EasySwoole\Component\Process\Socket\AbstractUnixProcessEasySwoole\Component\Process\Socket\AbstractUnixProcess->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
#0  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
#0  #2  Swoole\Coroutine\Socket#2  Swoole\Coroutine\SocketEasySwoole\Crontab\Worker->EasySwoole\Task\Worker->->accept(->accept(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
#1  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]

#1  EasySwoole\Component\Process\Socket\AbstractUnixProcess
->EasySwoole\Component\Process\Socket\AbstractUnixProcess->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
#2  #2  EasySwoole\Task\WorkerEasySwoole\Crontab\Worker->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]



===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

===================================================================

 [Coroutine-1]
 [Coroutine-1]
--------------------------------------------------------------------

--------------------------------------------------------------------
#0  #0  Swoole\Coroutine\SocketSwoole\Coroutine\Socket->->accept(accept() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
#1  #1  EasySwoole\Component\Process\Socket\AbstractUnixProcessEasySwoole\Component\Process\Socket\AbstractUnixProcess->->
===================================================================
===================================================================run(run(
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]

===================================================================

===================================================================
#2  #2  EasySwoole\Crontab\WorkerEasySwoole\Task\Worker->->run(
 [Coroutine-1]
 [Coroutine-1]run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]

--------------------------------------------------------------------

--------------------------------------------------------------------
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]


#0  #0  Swoole\Coroutine\SocketSwoole\Coroutine\Socket->->accept(accept() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
#1  #1  EasySwoole\Component\Process\Socket\AbstractUnixProcessEasySwoole\Component\Process\Socket\AbstractUnixProcess->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
#2  #2  EasySwoole\Task\WorkerEasySwoole\Crontab\Worker->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]



===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

 [Coroutine-1]
--------------------------------------------------------------------

 [Coroutine-1]
--------------------------------------------------------------------
#0  Swoole\Coroutine\Socket->accept() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
#0  #1  Swoole\Coroutine\SocketEasySwoole\Component\Process\Socket\AbstractUnixProcess->->accept(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
#1  #2  EasySwoole\Component\Process\Socket\AbstractUnixProcessEasySwoole\Crontab\Worker->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/bridge/src/BridgeProcess.php:24]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
#2  EasySwoole\Bridge\BridgeProcess
->run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]


===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================
===================================================================

 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

 [Coroutine-1]
--------------------------------------------------------------------

 [Coroutine-1]
--------------------------------------------------------------------
#0  Swoole\Coroutine\Socket#0  ->Swoole\Coroutine\Socketaccept(->) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
accept(#1  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
EasySwoole\Component\Process\Socket\AbstractUnixProcess#1  ->EasySwoole\Component\Process\Socket\AbstractUnixProcessrun(->) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/crontab/src/Worker.php:35]
run(#2  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/bridge/src/BridgeProcess.php:24]
EasySwoole\Crontab\Worker#2  ->EasySwoole\Bridge\BridgeProcess->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]



===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

 [Coroutine-1]
--------------------------------------------------------------------
#0  Swoole\Coroutine::printBackTrace() called at [@swoole-src/library/core/Coroutine/functions.php:88]
#1  Swoole\Coroutine\deadlock_check()
#2  Swoole\Event::wait() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:169]


===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

===================================================================

 [Coroutine-1]
 [Coroutine-1]
--------------------------------------------------------------------

--------------------------------------------------------------------
#0  Swoole\Coroutine\Socket#0  ->Swoole\Coroutine\Socketaccept(->) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
accept(#1  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
EasySwoole\Component\Process\Socket\AbstractUnixProcess#1  ->EasySwoole\Component\Process\Socket\AbstractUnixProcessrun(->) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
run(#2  ) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
EasySwoole\Task\Worker#2  ->EasySwoole\Task\Workerrun(->) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
run(
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]


===================================================================
===================================================================
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
 [FATAL ERROR]: all coroutines (count: 1) are asleep - deadlock!
===================================================================

===================================================================

 [Coroutine-1]
 [Coroutine-1]
--------------------------------------------------------------------

--------------------------------------------------------------------
#0  #0  Swoole\Coroutine\SocketSwoole\Coroutine\Socket->->accept(accept() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/Socket/AbstractUnixProcess.php:38]
#1  #1  EasySwoole\Component\Process\Socket\AbstractUnixProcessEasySwoole\Component\Process\Socket\AbstractUnixProcess->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/task/src/Worker.php:71]
#2  #2  EasySwoole\Task\WorkerEasySwoole\Task\Worker->->run(run() called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]
) called at [/www/wwwroot/43.199.95.114/vendor/easyswoole/component/src/Process/AbstractProcess.php:165]


[2024-09-21 10:09:55 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 18:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 10:10:00 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:15:43 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:16:43 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:18:04 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:19:48 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 18:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 10:23:48 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:24:10 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 10:25:36 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 18:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 18:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 10:40:27 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 18:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 18:51:00][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 18:51:00][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 18:51:00][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 19:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-21 19:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 19:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-21 19:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 19:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 19:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 19:31:02][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 19:31:02][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 19:31:02][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 19:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 19:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-21 20:00:00][info][info]:[开始清除广告点击记录]
[2024-09-21 20:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-21 20:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:00:00][info][info]:[清除广告点击记录完成]
[2024-09-21 20:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 20:51:11][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 20:51:11][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 20:51:11][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 21:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 21:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-21 21:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-21 13:03:32 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:06:02 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 21:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 13:15:24 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:17:57 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 21:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 13:22:59 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:23:23 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:28:55 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 21:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 13:30:10 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:30:51 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:32:18 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 21:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 21:41:24][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 21:41:24][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 21:41:24][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 13:42:47 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:49:51 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 21:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 13:50:36 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:53:47 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 13:59:02 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-21 22:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-21 22:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:00:05][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-21 22:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:11:34][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:11:34][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:11:34][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:13:50][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:13:50][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:13:50][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 22:51:48][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:52:48][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:52:48][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 22:52:48][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-21 23:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 23:00:00][info][info]:[处理超时的VIP订单完成]
[2024-09-21 23:02:28][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:02:28][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:02:28][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 23:11:01][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:11:01][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:11:01][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 23:22:26][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:22:26][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:22:26][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 23:31:49][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:31:49][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:31:49][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-21 23:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-21 23:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 00:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:00:00][info][info]:[开始清除广告点击记录]
[2024-09-22 00:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 00:00:01][info][info]:[清除广告点击记录完成]
[2024-09-22 00:01:00][info][info]:[开始进行商户账单结算]
[2024-09-22 00:01:00][info][info]:[目前没有需要结算的账单 参数：$date:2024-09-21]
[2024-09-22 00:03:00][info][info]:[开始处理VIP过期的用户]
[2024-09-22 00:03:00][info][info]:[处理VIP过期的用户完成]
[2024-09-22 00:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:21:36][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:51:12][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 00:52:59][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 01:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 01:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 01:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 01:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 01:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 01:41:39][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 01:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 02:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 02:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:21:26][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 02:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 02:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 03:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 03:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 03:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 04:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 04:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 04:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 05:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 05:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 05:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 06:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 06:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 06:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 07:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 07:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 07:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 08:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 08:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 08:51:32][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 09:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 09:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 09:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 09:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 09:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 09:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 09:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 09:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 10:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:00:00][info][info]:[开始清除广告点击记录]
[2024-09-22 10:00:00][info][info]:[清除广告点击记录完成]
[2024-09-22 10:00:04][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 10:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:21:25][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 10:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 10:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 11:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 11:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:11:22][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:31:13][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:51:12][trigger][warning]:[file_get_contents(https://yt102.g8bvhu323.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:52:12][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 11:53:29][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 12:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 12:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:01:07][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 12:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 12:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 12:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 12:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 12:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 13:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 13:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:31:16][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 13:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 13:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 14:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 14:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:21:33][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:31:32][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 06:31:54 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-22 14:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:41:15][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 14:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 15:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 15:01:26][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:22:00][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 15:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:01:20][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 16:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 16:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 17:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 17:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 17:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 18:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 18:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:31:01][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:32:12][trigger][warning]:[file_get_contents(https://bw102.8ec2fyv55.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 18:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 18:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 19:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 19:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:41:21][trigger][warning]:[file_get_contents(https://ysh102.72r5sre.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 19:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 19:51:00][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 20:00:00][info][info]:[开始清除广告点击记录]
[2024-09-22 20:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 20:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 20:00:06][info][info]:[清除广告点击记录完成]
[2024-09-22 20:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:41:24][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 20:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 20:51:42][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 21:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 21:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 21:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 21:11:09][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 21:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:31:19][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:41:19][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:43:19][trigger][warning]:[file_get_contents(https://xc101.z3ctej3nb.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 21:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 22:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:00:13][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 22:01:48][trigger][warning]:[file_get_contents(https://bd100.cm3wa2c.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: Connection timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:21:56][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 22:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 22:51:31][trigger][warning]:[file_get_contents(https://yt102.g8bvhu323.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-22 23:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 23:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-22 23:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 23:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 15:23:51 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-22 15:24:06 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-22 15:25:05 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-22 15:25:19 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-22 23:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 23:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 23:41:30][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-22 23:51:03][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 00:00:00][info][info]:[开始清除广告点击记录]
[2024-09-23 00:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 00:00:06][trigger][notice]:[Undefined variable: lockValue at file:/www/wwwroot/43.199.95.114/App/Service/Market/VipOrderService.php line:192]
[2024-09-23 00:00:06][trigger][error]:[Argument 2 passed to App\Utility\RedisLock::releaseLock() must be of the type string, null given, called in /www/wwwroot/43.199.95.114/App/Service/Market/VipOrderService.php on line 192 at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始处理超时的VIP订单', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $overtimeOrderList = \App\Model\User\UserVipOrderModel::create()
                    ->where([
                        'status' => \App\Model\User\UserVipOrderModel::STATE_WAITING_BUYERS_PAYMENT,
                        'createTime' => [date('Y-m-d H:i:s', strtotime('-3 days')), '<']
                    ])
                    ->all();

                if (!$overtimeOrderList) {
                    \App\Utility\LogHandler::getInstance()->logCustomFile('目前没有需要处理的超时VIP订单', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');
                    \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                    return true;
                }

                \EasySwoole\ORM\DbManager::getInstance()->startTransactionWithCount();

                foreach ($overtimeOrderList as $item) {
                    \App\Service\Market\VipOrderService::getInstance()->buyerPaymentTimeout($item->orderNo);
                }

                \EasySwoole\ORM\DbManager::getInstance()->commitWithCount();

                \App\Utility\LogHandler::getInstance()->logCustomFile('处理超时的VIP订单完成', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \EasySwoole\ORM\DbManager::getInstance()->rollbackWithCount();
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:35]
[2024-09-23 00:00:10][info][info]:[清除广告点击记录完成]
[2024-09-23 00:01:00][info][info]:[开始进行商户账单结算]
[2024-09-23 00:01:00][info][info]:[目前没有需要结算的账单 参数：$date:2024-09-22]
[2024-09-23 00:03:00][info][info]:[开始处理VIP过期的用户]
[2024-09-23 00:03:00][info][info]:[处理VIP过期的用户完成]
[2024-09-23 00:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 00:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 00:22:00][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:22:00][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:22:00][trigger][warning]:[file_get_contents(https://yxz100.3frnunw8r.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 00:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 00:41:20][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:41:20][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:41:20][trigger][warning]:[file_get_contents(https://nf102.gdagvbn.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 00:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 01:00:00][info][info]:[处理超时的VIP订单完成]
[2024-09-23 01:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:41:17][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 01:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 01:51:24][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 01:51:24][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 01:51:24][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 01:52:52][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 02:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 02:00:00][info][info]:[处理超时的VIP订单完成]
[2024-09-23 02:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 02:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 02:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 02:31:03][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:31:03][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:31:03][trigger][warning]:[file_get_contents(https://df101.3q5c5bztk.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:33:10][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:33:10][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:33:10][trigger][warning]:[file_get_contents(https://bd102.4tb6bhufz.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 02:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 02:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 03:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 03:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 04:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 04:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 05:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:00:04][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 05:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 05:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 06:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 06:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 06:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 07:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 07:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 07:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 08:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 08:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 08:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 09:00:00][info][info]:[处理超时的VIP订单完成]
[2024-09-23 09:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 09:51:02][trigger][warning]:[file_get_contents(https://yj101.p6uyj47np.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: HTTP request failed! at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 10:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 10:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 10:00:00][info][info]:[开始清除广告点击记录]
[2024-09-23 10:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 10:00:00][info][info]:[清除广告点击记录完成]
[2024-09-23 10:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 10:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 10:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 10:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 10:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 11:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 11:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 11:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 11:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 11:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 11:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 11:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:41:37 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 11:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 03:51:21 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:56:45 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:57:59 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:58:22 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:58:50 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:58:53 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 03:59:29 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 12:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 12:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 12:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 12:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 12:11:12][trigger][warning]:[file_get_contents(): SSL: Handshake timed out at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 12:11:12][trigger][warning]:[file_get_contents(): Failed to enable crypto at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 12:11:12][trigger][warning]:[file_get_contents(https://bf100.m6xupxj.com:82/api/tongbu/dhclick?kname=爱波比社区): failed to open stream: operation failed at file:closure://function () {
            $lockKey = $this->jobName();
            $lockValue = \App\Utility\RedisLock::lock($lockKey);

            try {
                \App\Utility\LogHandler::getInstance()->logCustomFile('开始统计渠道成本记录', $this->logName(), \App\Utility\LogHandler::LOG_LEVEL_INFO, 'info');

                $channelCosts = \App\Model\Merchant\ChannelCostStatisticModel::create()->all();
                foreach ($channelCosts as $channelCost){
                    $response = file_get_contents($channelCost['apiUrl']);
                    if($response){
                        \App\Model\Merchant\ChannelCostStatisticModel::create()->where(['channelCostId' => $channelCost['channelCostId']])->update(['dhJson' => $response]);
                    }
                }
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
            } catch (\Throwable  $e) {
                \App\Utility\RedisLock::releaseLock($lockKey, $lockValue);
                throw new \Exception($e->getMessage(), $e->getCode());
            }

            return true;
        } line:11]
[2024-09-23 04:15:29 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 12:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:27:56 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 04:29:43 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 12:30:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:30:19 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 04:30:30 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 12:40:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:49:24 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 12:50:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 04:52:05 *816145.0]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 04:56:41 *816152.7]	WARNING	Context::parse_multipart_data() (ERRNO 9010): parse multipart body failed, reason: no CRLF at first boundary end: expecting CR at 40, but it is '-'
[2024-09-23 13:00:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 13:00:00][info][info]:[开始处理超时的VIP订单]
[2024-09-23 13:00:00][info][info]:[目前没有需要处理的超时VIP订单]
[2024-09-23 13:10:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 13:20:00][info][info]:[开始统计渠道成本记录]
[2024-09-23 13:30:00][info][info]:[开始统计渠道成本记录]
